# 1.
# Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.


# script - solution_01.py


# 2. 
# Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].


def bigger_el(list):
    return [list[i] for i in range(1, len(list)) if list[i-1] < list[i]]


my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result_list = bigger_el(my_list)
print(result_list)


#test
assert(result_list == [12, 44, 4, 10, 78, 123])


# 3. 
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.


def find_func(start, end):
    assert type(start) == int and type(end) == int, 'start and end should be integers'
    return [el for el in range(start, end+1) if (el % 20 == 0 or el % 21 == 0)]


print(find_func(20, 240))


# test
assert(find_func(20, 105) == [20, 21, 40, 42, 60, 63, 80, 84, 100, 105])


# 4. 
# Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]


def uniq_el(list):
    return [el for el in list if list.count(el) == 1]


my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print(uniq_el(my_list))


#test
assert(uniq_el(my_list) == [23, 1, 3, 10, 4, 11])


# 5. 
# Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().


from functools import reduce
from operator import mul


def mul_list(start, end):
    assert type(start) == int and type(end) == int, 'start and end should be integers'
    assert start < end, 'start should be less than end'
    range_list = [el for el in range(start, end+1) if el % 2 == 0]
    return reduce(mul, range_list)


start, end = 100, 1000
print(mul_list(start, end))


# test
assert(mul_list(1, 10) == 3840)


# 6. 
# Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.


import solution_06

solution_06.iter_int_print()
solution_06.iter_list_print()


# 7. 
# Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def fact_gen(n):
    assert type(n) == int and n >= 0, 'n should be positive integer'
    i, factorial = 1, 1
    while i <= n:
        factorial *= i
        yield factorial
        i += 1


def fact_yield(n):
    for el in fact_gen(n):
        print(el)


fact_yield(4)
